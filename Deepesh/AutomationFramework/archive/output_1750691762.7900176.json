{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 6}, "tests": {"0": {"status": "ERROR", "message": "self = <AutomationFramework.tests.bus_booking.test_bus_booking.TestBusBooking object at 0x0000020B96BF1670>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.bus = BusBooking(self.driver)\n        self.util = UtilTools()\n        cur_dir = os.getcwd()\n>       self.json_data = self.util.read_json_content(f\"{cur_dir}\\\\modules\\\\bus_page\\\\bus_booking_data.json\")\n\ntests\\bus_booking\\test_bus_booking.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils_tools.py:8: in read_json_content\n    json_data = json.loads(data)\nC:\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020B931B3020>\ns = '{\\n    \"select_bus_name\": \"Zingbus Plus\",\\n    \"boarding_point\" : \"Kalamboli\",\\n    \"dropping_point\" : \"Wakad Jinger Hotel\",\\n\\n\\n}\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 7 column 1 (char 124)\n\nC:\\Python312\\Lib\\json\\decoder.py:353: JSONDecodeError\n", "test_name": "test_navigate_to_bus", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <AutomationFramework.tests.bus_booking.test_bus_booking.TestBusBooking object at 0x0000020B96BF1790>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.bus = BusBooking(self.driver)\n        self.util = UtilTools()\n        cur_dir = os.getcwd()\n>       self.json_data = self.util.read_json_content(f\"{cur_dir}\\\\modules\\\\bus_page\\\\bus_booking_data.json\")\n\ntests\\bus_booking\\test_bus_booking.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils_tools.py:8: in read_json_content\n    json_data = json.loads(data)\nC:\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020B931B3020>\ns = '{\\n    \"select_bus_name\": \"Zingbus Plus\",\\n    \"boarding_point\" : \"Kalamboli\",\\n    \"dropping_point\" : \"Wakad Jinger Hotel\",\\n\\n\\n}\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 7 column 1 (char 124)\n\nC:\\Python312\\Lib\\json\\decoder.py:353: JSONDecodeError\n", "test_name": "test_select_src_city", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <AutomationFramework.tests.bus_booking.test_bus_booking.TestBusBooking object at 0x0000020B96BF1CA0>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.bus = BusBooking(self.driver)\n        self.util = UtilTools()\n        cur_dir = os.getcwd()\n>       self.json_data = self.util.read_json_content(f\"{cur_dir}\\\\modules\\\\bus_page\\\\bus_booking_data.json\")\n\ntests\\bus_booking\\test_bus_booking.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils_tools.py:8: in read_json_content\n    json_data = json.loads(data)\nC:\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020B931B3020>\ns = '{\\n    \"select_bus_name\": \"Zingbus Plus\",\\n    \"boarding_point\" : \"Kalamboli\",\\n    \"dropping_point\" : \"Wakad Jinger Hotel\",\\n\\n\\n}\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 7 column 1 (char 124)\n\nC:\\Python312\\Lib\\json\\decoder.py:353: JSONDecodeError\n", "test_name": "test_select_dest_city", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = <AutomationFramework.tests.bus_booking.test_bus_booking.TestBusBooking object at 0x0000020B96BF1F10>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.bus = BusBooking(self.driver)\n        self.util = UtilTools()\n        cur_dir = os.getcwd()\n>       self.json_data = self.util.read_json_content(f\"{cur_dir}\\\\modules\\\\bus_page\\\\bus_booking_data.json\")\n\ntests\\bus_booking\\test_bus_booking.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils_tools.py:8: in read_json_content\n    json_data = json.loads(data)\nC:\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020B931B3020>\ns = '{\\n    \"select_bus_name\": \"Zingbus Plus\",\\n    \"boarding_point\" : \"Kalamboli\",\\n    \"dropping_point\" : \"Wakad Jinger Hotel\",\\n\\n\\n}\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 7 column 1 (char 124)\n\nC:\\Python312\\Lib\\json\\decoder.py:353: JSONDecodeError\n", "test_name": "test_select_depart_date", "rerun": "0"}, "4": {"status": "ERROR", "message": "self = <AutomationFramework.tests.bus_booking.test_bus_booking.TestBusBooking object at 0x0000020B96BF2180>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.bus = BusBooking(self.driver)\n        self.util = UtilTools()\n        cur_dir = os.getcwd()\n>       self.json_data = self.util.read_json_content(f\"{cur_dir}\\\\modules\\\\bus_page\\\\bus_booking_data.json\")\n\ntests\\bus_booking\\test_bus_booking.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils_tools.py:8: in read_json_content\n    json_data = json.loads(data)\nC:\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020B931B3020>\ns = '{\\n    \"select_bus_name\": \"Zingbus Plus\",\\n    \"boarding_point\" : \"Kalamboli\",\\n    \"dropping_point\" : \"Wakad Jinger Hotel\",\\n\\n\\n}\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 7 column 1 (char 124)\n\nC:\\Python312\\Lib\\json\\decoder.py:353: JSONDecodeError\n", "test_name": "test_click_to_search_button", "rerun": "0"}, "5": {"status": "ERROR", "message": "self = <AutomationFramework.tests.bus_booking.test_bus_booking.TestBusBooking object at 0x0000020B96BF23F0>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.bus = BusBooking(self.driver)\n        self.util = UtilTools()\n        cur_dir = os.getcwd()\n>       self.json_data = self.util.read_json_content(f\"{cur_dir}\\\\modules\\\\bus_page\\\\bus_booking_data.json\")\n\ntests\\bus_booking\\test_bus_booking.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils_tools.py:8: in read_json_content\n    json_data = json.loads(data)\nC:\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000020B931B3020>\ns = '{\\n    \"select_bus_name\": \"Zingbus Plus\",\\n    \"boarding_point\" : \"Kalamboli\",\\n    \"dropping_point\" : \"Wakad Jinger Hotel\",\\n\\n\\n}\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 7 column 1 (char 124)\n\nC:\\Python312\\Lib\\json\\decoder.py:353: JSONDecodeError\n", "test_name": "test_select_bus_to_travel", "rerun": "0"}}, "suite_name": "tests/bus_booking/test_bus_booking.py"}}}, "date": "June 23, 2025", "start_time": 1750691704.209961, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "6", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "6"}